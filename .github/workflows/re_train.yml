name: Retrain Model on New Data

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"  # Every day at 2 AM UTC

jobs:
  retrain:
    runs-on: ubuntu-latest
    env:
      RUN_NUMBER: ${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          create_credentials_file: true
          export_environment_variables: true

      - name: Install dependencies
        run: pip install pandas scikit-learn joblib gcsfs pytest evidently

      - name: Download existing dataset and new data from GCS
        run: |
          mkdir -p data/full data/new-data
          gcloud storage cp gs://spam-data-pipeline/full/spam.csv data/full/spam.csv || echo "No full dataset found"
          gcloud storage cp gs://spam-data-pipeline/new-data/*.csv data/new-data/ || echo "No new data found"

      - name: Check for data drift
        id: drift
        run: python check_drift.py

      - name: Skip retraining if no drift
        if: steps.drift.outcome == 'failure'
        run: echo "Drift not detected. Skipping retraining." && exit 0

      - name: Merge data and train model
        if: steps.drift.outcome == 'success'
        run: python retrain.py

      - name: Run model tests
        run: pytest tests/

      - name: Upload updated dataset to GCS
        if: success()
        run: |
          gcloud storage cp data/full/spam.csv gs://spam-data-pipeline/full/spam.csv
          gcloud storage cp drift_report.html gs://spam-data-pipeline/drift_reports/drift_report_$RUN_NUMBER.html

      - name: Archive new data files
        if: success()
        run: |
          for f in data/new-data/*.csv; do
            name=$(basename "$f")
            gcloud storage cp "$f" gs://spam-data-pipeline/archive/"$name"
          done
          gcloud storage rm gs://spam-data-pipeline/new-data/*.csv || true

  call_cicd:
    needs: retrain
    runs-on: ubuntu-latest
    steps:
      - name: Trigger CI/CD workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: workflow_pushdocker.yml
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}
          inputs: '{"branch": "${{ github.ref_name }}"}'
