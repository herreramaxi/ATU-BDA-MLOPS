name: CI/CD ML Workflow

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  workflow_dispatch:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
    secrets:
      GCP_CREDENTIALS:
        required: true
      DOCKER_HUB_USERNAME:
        required: true
      DOCKER_HUB_ACCESS_TOKEN:
        required: true
      GKE_PROD_CLUSTER:
        required: true
      GKE_DEV_CLUSTER:
        required: true
      GKE_REGION:
        required: true
      branch:
        required: true
        type: string

env:
  IMAGE_BASE: herreramaxi/spam-modelbuild
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.setvars.outputs.branch }}
    steps:
      - name: Set environment vars
        id: setvars
        run: |
          BRANCH="${{ inputs.branch || github.ref_name }}"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "SOURCE_BRANCH=$BRANCH" >> $GITHUB_ENV
          if [[ "$BRANCH" == "main" ]]; then
            echo "ENVIRONMENT=PROD" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=DEV" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          create_credentials_file: true
          export_environment_variables: true

      - name: Install dependencies
        run: pip install pandas scikit-learn joblib pytest gcsfs

      - name: Train model
        run: python model.py
        env:
          DATASET_PATH: gs://spam-data-pipeline/full/spam.csv

      - name: Run tests
        run: pytest tests/

      - name: Upload model and metrics to GCS
        run: |
          gcloud storage cp SpamModel.pkl gs://spam-data-pipeline/models/SpamModel_$IMAGE_TAG.pkl
          gcloud storage cp model_metrics.json gs://spam-data-pipeline/models/model_metrics_$IMAGE_TAG.json

      - name: Build Docker image
        run: |
          docker build . \
            --build-arg BUILD=$IMAGE_TAG \
            --build-arg ENVIRONMENT=$ENVIRONMENT \
            -t $IMAGE_BASE:$IMAGE_TAG
          if [[ "$SOURCE_BRANCH" == "main" ]]; then
            docker tag $IMAGE_BASE:$IMAGE_TAG $IMAGE_BASE:latest
          fi

      - name: Login and push Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          docker push $IMAGE_BASE:$IMAGE_TAG
          if [[ "$SOURCE_BRANCH" == "main" ]]; then
            docker push $IMAGE_BASE:latest
          fi

  deploy:
    if: ${{ needs.build_and_test.outputs.branch == 'main' || needs.build_and_test.outputs.branch == 'develop' }}
    needs: build_and_test
    runs-on: ubuntu-latest
    env:
      IMAGE_BASE: herreramaxi/spam-modelbuild
      IMAGE_TAG: ${{ github.run_number }}
      SOURCE_BRANCH: ${{ needs.build_and_test.outputs.branch }}
      GKE_CLUSTER_NAME: ${{ needs.build_and_test.outputs.branch == 'main' && secrets.GKE_PROD_CLUSTER || secrets.GKE_DEV_CLUSTER }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.SOURCE_BRANCH }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: "gke-gcloud-auth-plugin"

      - name: Authenticate to GKE cluster
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_REGION }}

      - name: Deploy to GKE
        run: |
          echo "Deploying to $SOURCE_BRANCH on cluster $GKE_CLUSTER_NAME"
          kubectl apply -f kubernetes/
          kubectl set image deployment/spam-app spam-app=$IMAGE_BASE:$IMAGE_TAG
          kubectl rollout status deployment/spam-app